#!/bin/bash

# 2018-11-06 J.Nider
#
# A simple build system
# This is based on the observation that many Makefiles actually call out to bash
# to do the real work. That includes many tasks such as creating output directories,
# checking for the existence of files, and many others that the Make language
# simply doesn't allow for. This kinda defeats the purpose of having a Make language
# since the moment a bash function is called directly, we lose portability to run
# the Makefile on any other shell.
# Moreover, the syntax and functionality of make are not that different from bash
# itself, which begs the question 'why use two languages instead of one?'
# Thus, 'bake' is the result of bash+make => a bash-based build system

# allow multiple levels of function recursion by default
# We want enough levels to catch circular dependencies without artificially limiting valid usage
# This can be overridden on the command line, if necessary
FUNCNEST=${NESTING:-10}
#set -x

declare -a rules
declare -A dep_names
declare -A flags
declare -A objects

unset __verbose
unset __changedir

__version="1.1"

function _language()
{
	local language=${1,,} # the name of the language, converted to lowercase
	realpath=$(readlink -f $0) # in case 'bake' was executed from a symbolic link
	local path=${realpath%/*} # full path of 'bake' script (minus the script name)

	case $language in
	asm)
		source $path/asm_rules
		;;
	c)
		source $path/c_rules
		;;
	cpp)
		source $path/cpp_rules
		;;
	cuda)
		source $path/cuda_rules
		;;
	*)
		echo "Error: language '$language' is not supported!"
		_usage languages
		exit 0
		;;
	esac
}

function _filter_name()
{
	local name=$1 # the name to be filtered
	local -n _result=$2 # the return variable to be filled with the filtered name

	# bash variable names cannot have a leading digit but directories can
	# prepend a _
	[[ $name =~ ^[[:digit:]] ]] && name="_"$name

	# replace . with _
	name=${name//\./_}
	# replace / with _
	name=${name//\//_}
	# replace - with _
	name=${name//-/_}
	_result=$name
}

# Return an array containing all of the dependencies of the specified target
function _deps_of()
{
	local target=$1
	local -n _result=$2 # the return variable to be filled with the dependencies

	# use the redirection variable if it exists, otherwise use the target name directly
	dep_var_name=${dep_names[$target]:-$target}

	_filter_name $dep_var_name dep_var_name
	#[ $__verbose ] && echo "Getting dependencies of target $target from variable "\$"$dep_var_name"
	local -n dep_list=$dep_var_name
	_result=(${dep_list[@]})
}

# extract the filename portion of a file (by removing the path)
# could use external "basename" utility instead
function _filename()
{
	local name=$1
	local -n _result=$2
	_result=${name##*/}
}

# export a list of all rules
# This function depends on the output (echo) to be captured by using $(_find_rules)
# or something similar
function _find_rules()
{
	local fn_raw=($(declare -F))
	for fn_name in $(declare -F); do
		if [[ $fn_name =~ ^rule* ]]; then
		echo "$fn_name"
		fi
	done
}

# dump out all discovered rules to stdout
function _print_rules()
{
	echo "All known rules:"
	for rule in $rules; do
		echo $rule
	done
}

function _print_flags()
{
	echo "Known flags:"
	for f in ${!flags[@]}; do
		echo "[$f]="
		echo "  ${flags[$f]}"
	done
}

#generic rule for checking the timestamp to see if the target needs to be rebuilt
# Emulate the behaviour of make. Make targets are built recursively in 2 stages - first
# the dependencies are built, and then the target itself is built.
# build() takes 2 main parameters:
# target: name of the target to build
# dep_var_name: the name of a variable containing an array of dependencies
function _build_target()
{
	local target=$1
	local dep_var_name=$2
	local outdir=$3
	local parent_timestamp=$4
	local parent=$5
	local rebuild
	local ret
	local modified
	local target_exists

	# make sure output directory exists
	if [[ ! -d $outdir ]]; then
		[ $__verbose ] && echo "Creating output directory $outdir"
		mkdir -p $outdir
	fi

	# set the 'modified' timestamp
	# need to check if this is an absolute path by looking at the first character
	[ $__verbose ] && echo "Checking for the existence of a target file named '$outdir/$target'"
	if [[ -e $outdir/$target ]]; then
		target_exists=true
		rebuild=false
		if [[ -d $outdir/$target ]]; then
			# directory - recurse into it and build whatever is there
			[ $__verbose ] && echo "   Entering directory '$target'"
			pushd .
			parent_dir=$PWD
			[ $__verbose ] && echo "   Changing directory to $outdir/$target"
			cd $outdir/$target
			cmd="bake ${__verbose:+"-v"} -o $parent_dir $parent"
			[ $__verbose ] && echo $cmd
			$cmd
			popd
		elif [[ -f $outdir/$target ]]; then
			# regular file
			[ $__verbose ] && echo "   Target (rel) $outdir/$target exists"
			modified=$(stat -c %Y "$outdir/$target")
		fi
	elif [[ -e $target ]]; then
		target_exists=true
		rebuild=false
		if [[ -f $target ]]; then
			# regular file
			[ $__verbose ] && echo "   Target (abs) $target exists"
			modified=$(stat -c %Y "$target")
		fi
	else
		[ $__verbose ] && echo "   target file '$outdir/$target' doesn't exist"
		modified=0
		rebuild=true
	fi

	# Check to see if we need to rebuild the target because of changes in the dependencies
	# find the dependency list. The user can override the dependency list name by putting the
	# name of the list in the variable dep_names[$target] in the script. Otherwise, the
	# dependency list will default to dep_$target.
	# Sometimes, dep_$target isn't a valid identifier (for example, contains '/' in a file path)
	# For that reason, the name is filtered beforehand.
	dep_var_name=${dep_names[$target]:-$target}
	if [[ ${dep_var_name##*.} == "d" && -e $dep_var_name ]]; then
		[[ $__verbose ]] && echo "Using $dep_var_name as a Make-style dependency file"
		IFS=": " read -es target deps < $dep_var_name
		dep_list=($deps)
	else
		_filter_name $dep_var_name dep_var_name
		[ $__verbose ] && echo "   Dependencies are in "\$"$dep_var_name"
		local -n dep_list=$dep_var_name
	fi

	if [[ $dep_list ]]; then
		[ $__verbose ] && echo "   Dependencies of $target: ${dep_list[*]}"

		## this can be parallelized ##
		local dep
		for dep in ${dep_list[*]}; do
			if [[ $dep ]]; then
				# filter the target name to create a valid identifier
				_filter_name $dep filtered_dep
				_build_target $dep dep_names[$filtered_dep] $outdir $modified $target
				ret=$?
				if [[ $ret == 255 ]]; then
					echo "[$(pwd)] Dependency $dep failed"
					return $ret
				elif [[ $ret == 2 ]]; then
					[ $__verbose ] && echo "Prerequisite $dep says we must rebuild $target"
					rebuild=true
				fi

				# check the timestamp of the dependency to see if the target needs to be rebuilt
				if [[ -f $dep && $modified != 0 ]]; then
					dep_modified=$(stat -c %Y "$dep")
					[ $__verbose ] && echo "Checking timestamp of $dep ($dep_modified) vs $target ($modified)"
					if [[ $dep_modified > $modified ]]; then
						[ $__verbose ] && echo "} $target out of date"
						rebuild=true
					fi
				fi
			fi
		done
			[ $__verbose ] && echo "   All dependencies of $target are up to date"
	else
		[ $__verbose ] && echo "   No dependencies"
	fi

	# if all of the prerequisites were already up-to-date, and the target exists, there is nothing to do!
	$rebuild || return 0

	# check if this exists only as an input file
	# JKN - this doesn't rebuild out-of-date targets that already exist!
	#if [[ -f $target ]]; then
	#	[ $__verbose ] && echo "Found input file $target"
	#	return 0
	#fi

	# extract target directory, and make sure it exists
	local target_dir=${target%/*}
	if [[ $target_dir != $target && ! -d $target_dir ]]; then
		[ $__verbose ] && echo "} Creating output directory $target_dir"
		mkdir -p $target_dir
	fi

	# stage 2: the build steps based on file type or other user-defined rules
	[ $__verbose ] && echo "Looking for rule for target $target"
	for rule in ${rules[*]}; do
		$rule "$target" "${flags[$target]}"
		ret=$?
		#echo "$rule=$ret"
		if [[ $ret == "0" ]]; then
			# we found a matching rule
			[ $__verbose ] && echo "   rule '$rule' matched"
			return $ret
		fi
	done
	[ $__verbose ] && echo "   No matching rule for target $target"

	# check if this exists as an input directory
	if [[ -d $target ]]; then
		[ $__verbose ] && echo "Found input directory $target"
		cmd="bake ${__verbose:+"-v"} -p $target $dep"
		[ $__verbose ] && echo $cmd
		$cmd
		ret=$?
		return $ret
	fi
	return -1 # no rule found to rebuild this target
}

function _usage()
{
	local param=$1

	echo "Bake: a bash-based build system"
	echo "Version: $__version"
	echo "bake [OPTIONS] [TARGET]"
	echo "Options:"
	echo "-C <dir>           Change to specified directory before executing bake"
	echo "-f <script>        Specify the recipe file containing build instructions"
	echo "-h                 This help screen"
	echo "-o <path>          Specify the output directory for any targets"
	echo "-v                 Set 'verbose' mode; usually for debugging the build script"
	echo ""
	echo "Special targets:"
	echo "rules              Print out all user-defined rules"
	echo "filter_name <string> Print the valid variable name that bake can use"

	# tell the user which languages have built-in rules and how to include them
	if [[ $param == "languages" ]]; then
		echo ""
		echo "Supported languages:"
		echo "ASM      [_language asm]"
		echo "C        [_language c]"
		echo "C++      [_language cpp]"
		echo "CUDA     [_language cuda]"
	fi
}

### Start here ###
scriptfile="recipe" # the default script name
srcdir=$(pwd) # default path
outdir=$(pwd) # default output directory

# see what options the user is asking for
while getopts "C:f:ho:p:s:v" option; do
	case $option in
	C)
		# change to the specified directory
		__changedir=$OPTARG
		[[ $__verbose ]] && echo "Changing to $__changedir"
		pushd .
		cd $__changedir
		# srcdir and outdir are relative to the current working directory
		srcdir=$(pwd) # default path
		outdir=$(pwd) # default output directory
		;;
	f)
		scriptfile=$OPTARG
		;;
	o)
		outdir=$OPTARG
		;;
	s)
		srcdir=$OPTARG
		;;
	v)
		__verbose=1
		;;
	*)
		_usage
		exit 0
		;;
	esac
done
shift $((OPTIND-1))

[[ $__verbose ]] && echo "srcdir: $srcdir"
[[ $__verbose ]] && echo "outdir: $outdir"

# figure out the build target. If a parameter was passed on the command line, use that. Otherwise, look for one called 'main'
target=${1:-"main"}

# handle special targets before the script is sourced, in case it has errors
if [[ $target == "filter_name" ]]; then
	_filter_name $2 filtered_name
	[ $__verbose ] && echo "The dependencies will be in a variable called:"
	echo $filtered_name
	exit
elif [[ $target == "languages" ]]; then
	_usage languages
	exit
elif [ $target == "help" ]; then
	_usage
	exit
fi

# read script file
if [[ ! -f $srcdir/$scriptfile ]]; then
	echo "I can't find the script called '$scriptfile' in the directory:" $srcdir
	exit -2
fi

[ $__verbose ] && echo "Reading script '$(pwd)/$scriptfile'"
source $scriptfile

# find rules
rules=$(_find_rules)

# print the rules - this obviously must be done after the script is sourced
if [[ $target == "rules" ]]; then
	_print_rules
	exit
fi

# print the known flags
if [[ $target == "flags" ]]; then
	_print_flags
	exit
fi

# build the user-specified target
[ $__verbose ] && echo "Building target '$target'"

# for each target in the list, build it recursively
_build_target $target dep_names[$target] $outdir
[ $__verbose ] && echo "Done"

# return thee, from whence thou came
[[ -v $__changedir ]] && popd
echo "[$(pwd)]"
